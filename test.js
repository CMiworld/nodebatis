// Generated by CoffeeScript 1.7.1
(function() {
  var DOMParser, Rule, fs, rule;

  DOMParser = require('xmldom').DOMParser;

  fs = require('fs');

  Rule = (function() {
    function Rule(dir) {
      var xml;
      xml = fs.readFileSync(dir).toString();
      this.xmlDoc = new DOMParser().parseFromString(xml);
      this.result = {};
    }

    Rule.prototype.getDocumentElement = function() {
      if (this.xmlDoc.documentElement.nodeName !== 'mapper') {
        return null;
      } else {
        return this.xmlDoc.documentElement;
      }
    };

    Rule.prototype.getValue = function(val) {
      return val.replace(/\n/g, '').trim();
    };

    Rule.prototype.allOper = 'select,update,insert,delete,drop';

    Rule.prototype.getSQL = function(dom) {
      var cond, id, sql, sqlArray, sub, that, _i, _j, _len, _len1, _ref, _ref1;
      that = this;
      sqlArray = [];
      id = dom.getAttribute('id' || 'NOID');
      _ref = dom.childNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sql = _ref[_i];
        if (sql.hasChildNodes()) {
          cond = {};
          cond.name = sql.tagName;
          cond.test = that.getValue(sql.getAttribute('test'));
          _ref1 = sql.childNodes;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            sub = _ref1[_j];
            cond.sql = that.getValue(sub.data);
          }
          sqlArray.push(cond);
        } else {
          sqlArray.push(that.getValue(sql.data));
        }
      }
      this.result[id] = sqlArray;
      return this.rawSQL(sqlArray);
    };

    Rule.prototype.getOper = function() {
      var doc, oper, that, _i, _len, _ref, _results;
      that = this;
      doc = this.getDocumentElement();
      _ref = doc.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        oper = _ref[_i];
        if (this.allOper.indexOf(oper.tagName) !== -1) {
          _results.push(that.getSQL(oper));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Rule.prototype.processChildNode = function(node) {
      var cond, conds, _i, _len, _results;
      if (node.name === 'if') {
        conds = node.test.split(' and ');
        _results = [];
        for (_i = 0, _len = conds.length; _i < _len; _i++) {
          cond = conds[_i];
          _results.push(this.parseCond(cond));
        }
        return _results;
      }
    };

    Rule.prototype.parseCond = function(cond) {
      switch (-1) {
        case cond.indexOf('<'):
          return console.log('<');
        case cond.indexOf('>'):
          return console.log('>');
      }
    };

    Rule.prototype.rawSQL = function(sqlArray) {
      var obj, rawArray, _i, _len;
      rawArray = [];
      for (_i = 0, _len = sqlArray.length; _i < _len; _i++) {
        obj = sqlArray[_i];
        if (typeof obj === 'string') {
          rawArray.push(obj);
        }
        if (obj instanceof Object) {
          this.processChildNode(obj);
        }
      }
      return console.log(rawArray.join(' '));
    };

    return Rule;

  })();

  rule = new Rule('xml/a.xml');

  rule.getOper();

}).call(this);
